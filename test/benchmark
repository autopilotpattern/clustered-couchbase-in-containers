#!/bin/bash

usage() {
    cat <<EOF
usage: $0 [COMMAND] <OPTIONS> -- <ARGS>

Runs couchbase benchmarks, for fun and sparkles.

COMMANDS:
  load: run cbc-benchmark to load data in for testing. any <args> passed in
        will be passed through to the cbc-benchmark executable.

  view: run cbc-benchmark to test views. any <args> passed in will be passed
        through to the cbc-benchmark executable.

  n1ql: run cbc-benchmark to test n1ql queries. any <args> passed in will be passed
        through to the cbc-benchmark executable.

  stop: stop and rm all clients
  update: pulls an updated test client container image
  help: show this message

OPTIONS:
 -p name of prefix to be hit (ex. "ccic")
 -n number of nodes to run (defaults to 2)
 -v version of Couchbase (only 3 or 4 are valid values, defaults to 4)

EXAMPLES:

 Load 1 million items into a v4 cluster named ccic4:
 ./benchmark load -v4 -p ccic4 -- -i 1000000

 Run a view test against a v4 cluster, using 4 nodes and 10 goroutines.
 ./benchmark view -n4 -v4 -- -i 1000000 -c 10

EOF
}

# default global parameters
VERSION=4
NUM=2
PREFIX=ccic
BUCKET=benchmark
ARGS=
LINKS=

get_links() {
    local consul=
    consul=$(docker ps | awk -F' +' '/ '${PREFIX}'_consul/{print $NF}')
    LINKS="--link $consul:consul "
    for container in $(docker ps | awk -F' +' '/ '${PREFIX}'_couchbase'${VERSION}'_[0-9+]/{print $NF}')
    do
        LINKS="$LINKS --link $container:$container "
    done
}

# load and test just wrap run with the appropriate command flag
load() { run ${@}; }
view() { run ${@}; }
n1ql() { run ${@}; }

run() {
    get_links
    for i in $(seq $NUM)
    do
        docker run -d \
               --name ${PREFIX}_benchmark_$i \
               $LINKS \
               0x74696d/cbc-benchmark \
               -$cmd -b ${BUCKET} ${@}
    done
}

stop() {
    for container in $(docker ps -a | awk -F' +' '/ '${PREFIX}'_benchmark_/{print $NF}')
    do
        docker stop $container || true
        docker rm $container
    done

}

update() {
    docker pull 0x74696d/cbc-benchmark
}

help() {
    usage
}

cmd="${1:-run}"
shift

while getopts "v:n:p:b:t:" optchar; do
    case "${optchar}" in
        v) VERSION=${OPTARG} ;;
        n) NUM=${OPTARG} ;;
        p) PREFIX=${OPTARG} ;;
        b) BUCKET=${OPTARG} ;;
    esac
done
shift $(expr $OPTIND - 1 )

$cmd "$@"
